{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS } from '../reducers/post';\nimport { Result } from 'antd';\n\nfunction addCommentAPI() {}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: action.data.content\n            }\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context.t0\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/anjoy/popolpodopolapo/proj-blog-anjoy/ch1/front/sagas/post.js"],"names":["addComment","watchAddComment","postSaga","all","fork","takeLatest","put","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","Result","addCommentAPI","action","type","data","postId","comment","content","error"],"mappings":";;;;yBAQUA,U;;;yBAkBAC,e;;;yBAIeC,Q;;AA9BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,QAA8E,kBAA9E;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,SAASC,aAAT,GAAwB,CAEvB;;AAED,SAAUX,UAAV,CAAqBY,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEJ,mBADA;AAENK,YAAAA,IAAI,EAAE;AACFC,cAAAA,MAAM,EAAEH,MAAM,CAACE,IAAP,CAAYC,MADlB;AAEFC,cAAAA,OAAO,EAAEJ,MAAM,CAACE,IAAP,CAAYG;AAFnB;AAFA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWQ,iBAAMX,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEL,mBADA;AAENU,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUjB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACE,mBAAD,EAAsBP,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,eAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS } from '../reducers/post';\nimport { Result } from 'antd';\n\nfunction addCommentAPI(){\n\n}\n\nfunction* addComment(action){\n    try{\n        // yield delay(2000)\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n                postId: action.data.postId,\n                comment: action.data.content,\n            }\n        })\n    } catch(e){\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: e\n        })\n    }\n}\n\nfunction* watchAddComment(){\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment)\n}\n\nexport default function* postSaga(){\n    yield all([\n        fork(watchAddComment),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}